#pragma once
#include <cl/types.h>

enum TOKEN_TYPE {
    UNKNOWN,
    KW_AUTO,
    KW_BREAK,
    KW_CASE,
    KW_CHAR,
    KW_CONST,
    KW_CONTINUE,
    KW_DEFAULT,
    KW_DO,
    KW_DOUBLE,
    KW_ELSE,
    KW_ENUM,
    KW_EXTERN,
    KW_FALSE,
    KW_FLOAT,
    KW_FOR,
    KW_GOTO,
    KW_IF,
    KW_INLINE,
    KW_INT,
    KW_LONG,
    KW_REGISTER,
    KW_RESTRICT,
    KW_RETURN,
    KW_SHORT,
    KW_SIGNED,
    KW_SIZEOF,
    KW_STATIC,
    KW_STRUCT,
    KW_SWITCH,
    KW_TRUE,
    KW_TYPEDEF,
    KW_UNION,
    KW_UNSIGNED,
    KW_VOID,
    KW_VOLATILE,
    KW_WHILE,
    IDENTIFIER,
    LIT_NUMBER,
    LIT_STRING,
    PLUS,
    PLUS_PLUS,
    PLUS_EQ,
    MINUS,
    MINUS_MINUS,
    MINUS_EQ,
    ARROW,
    STAR,
    STAR_EQ,
    SLASH,
    SLASH_EQ,
    MOD,
    MOD_EQ,
    EQ,
    EQ_EQ,
    NOT,
    NOT_EQ,
    LESSER,
    SHIFT_LEFT_EQ,
    SPACESHIP,
    SHIFT_LEFT,
    LESSER_EQ,
    GREATER,
    SHIFT_RIGHT_EQ,
    SHIFT_RIGHT,
    GREATER_EQ,
    BIT_NOT,
    BIT_AND,
    AND,
    BIT_AND_EQ,
    BIT_OR,
    BIT_OR_EQ,
    BIT_XOR,
    BIT_XOR_EQ,
    DOT,
    DOT_DOT_DOT,
    COLON,
    COLON_COLON,
    QUESTION,
    QUESTION_COLON,
    PAREN_LEFT,
    PAREN_RIGHT,
    BRACKET_LEFT,
    BRACKET_RIGHT,
    BRACE_LEFT,
    BRACE_RIGHT,
    SEMICOLON,
    COMMA
};

struct token_t {
    TOKEN_TYPE type;
    char value[128];
    usize len;
};

void token_new(token_t& token);
void token_concat(token_t& token, char c);
void token_concat(token_t& token, const char* cstr);

TOKEN_TYPE token_type_keyword(token_t& token);
